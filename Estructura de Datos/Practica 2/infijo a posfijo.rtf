{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16   1  \cb3\cf16 #include <iostream>
\par \cb1\cf0\ul0\i0\b0   2  \cb3\cf16 #include <cstring>
\par \cb1\cf0\ul0\i0\b0   3  
\par \cb1\cf0\ul0\i0\b0   4  \cb3\cf14\b using namespace \b0\cb3\cf16\b std\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0   5  \cb3\cf14\b class \b0\cb1\cf0 pila_arre
\par \cb1\cf0\ul0\i0\b0   6  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0   7     \cb3\cf14\b private\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0   8        \cb3\cf14\b int \b0\cb1\cf0 tam\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0   9        \cb3\cf14\b int \b0\cb1\cf0 tos\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  10        \cb3\cf14\b char \b0\cb1\cf0 datos\cb3\cf25 [\cb3\cf12 255\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0  11  
\par \cb1\cf0\ul0\i0\b0  12     \cb3\cf14\b public\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0  13        \cb1\cf0 pila_arre\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0  14        \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  15            \cb1\cf0 tam \cb3\cf25 =\cb3\cf12 255\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  16            \cb1\cf0 tos \cb3\cf25 = -\cb3\cf12 1\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  17        \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  18  
\par \cb1\cf0\ul0\i0\b0  19        \cb3\cf14\b bool \b0\cb1\cf0 vacia\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0  20        \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  21            \cb3\cf14\b return \b0\cb1\cf0 tos \cb3\cf25 == -\cb3\cf12 1\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  22        \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  23        \cb3\cf14\b bool \b0\cb1\cf0 llena\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0  24        \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  25            \cb3\cf14\b return \b0\cb1\cf0 tos \cb3\cf25 == \cb1\cf0 tam\cb3\cf25 -\cb3\cf12 1\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  26        \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  27        \cb3\cf14\b char \b0\cb1\cf0 top\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0  28        \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  29          \cb3\cf14\b char \b0\cb1\cf0 val \cb3\cf25 = \cb3\cf22 '\\0'\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  30          \cb3\cf14\b if\b0\cb3\cf25 (!\cb1\cf0 vacia\cb3\cf25 ())
\par \cb1\cf0\ul0\i0\b0  31             \cb1\cf0 val \cb3\cf25 = \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 tos\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0  32          \cb3\cf14\b return \b0\cb1\cf0 val\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  33  
\par \cb1\cf0\ul0\i0\b0  34        \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  35        \cb3\cf14\b void \b0\cb1\cf0 push\cb3\cf25 (\cb3\cf14\b char \b0\cb1\cf0 val\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  36        \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  37            \cb3\cf14\b if\b0\cb3\cf25 (!\cb1\cf0 llena\cb3\cf25 ())
\par \cb1\cf0\ul0\i0\b0  38               \cb1\cf0 datos\cb3\cf25 [++\cb1\cf0 tos\cb3\cf25 ]= \cb1\cf0 val\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  39            \cb3\cf14\b else
\par \cb1\cf0\ul0\i0\b0  40               \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nPila llena el dato " \cb3\cf25 << \cb1\cf0 val \cb3\cf25 << \cb3\cf20 " no se puede agregar" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  41        \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  42        \cb3\cf14\b char \b0\cb1\cf0 pop\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0  43        \cb3\cf25 \{   
\par \cb1\cf0\ul0\i0\b0  44            \cb3\cf14\b char \b0\cb1\cf0 val\cb3\cf25 =\cb3\cf22 '\\0'\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  45            \cb3\cf14\b if\b0\cb3\cf25 (!\cb1\cf0 vacia\cb3\cf25 ())
\par \cb1\cf0\ul0\i0\b0  46               \cb1\cf0 val \cb3\cf25 = \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 tos\cb3\cf25 --];
\par \cb1\cf0\ul0\i0\b0  47            \cb3\cf14\b else
\par \cb1\cf0\ul0\i0\b0  48               \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nPila vacia, no se puede eliminar" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  49            \cb3\cf14\b return \b0\cb1\cf0 val\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  50        \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  51  
\par \cb1\cf0\ul0\i0\b0  52  \cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0  53  \cb3\cf14\b class \b0\cb1\cf0 convierte_expresion
\par \cb1\cf0\ul0\i0\b0  54  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  55      \cb3\cf14\b public\b0\cb3\cf25 :     
\par \cb1\cf0\ul0\i0\b0  56              \cb3\cf14\b void \b0\cb1\cf0 postfi\cb3\cf25 (\cb3\cf14\b char \b0\cb1\cf0 ei\cb3\cf25 [], \cb3\cf14\b char \b0\cb1\cf0 ep\cb3\cf25 [])
\par \cb1\cf0\ul0\i0\b0  57          \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  58              \cb1\cf0 pila_arre pa\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  59  
\par \cb1\cf0\ul0\i0\b0  60              \cb3\cf14\b int \b0\cb1\cf0 i \cb3\cf25 = \cb3\cf12 0\cb3\cf25 ,\cb1\cf0 j\cb3\cf25 =\cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  61              \cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ] != \cb3\cf22 '\\0'\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  62              \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  63                  \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ] >= \cb3\cf22 'a' \cb3\cf25 && \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ] <= \cb3\cf22 'z' \cb3\cf25 || \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]>=\cb3\cf22 'A' \cb3\cf25 && \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ] <= \cb3\cf22 'Z'\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  64                  \cb3\cf25 \{                                        
\par \cb1\cf0\ul0\i0\b0  65                      \cb1\cf0 ep\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ] = \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]; 
\par \cb1\cf0\ul0\i0\b0  66                      \cb1\cf0 i\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0  67                      \cb1\cf0 j\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0  68                  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  69                  \cb3\cf14\b else
\par \cb1\cf0\ul0\i0\b0  70                      \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 '('\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  71                      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  72                          \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 push\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]);
\par \cb1\cf0\ul0\i0\b0  73                          \cb1\cf0 i\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0  74                      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  75                  \cb3\cf14\b else 
\par \cb1\cf0\ul0\i0\b0  76                       \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 ')'\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  77                       \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  78                          \cb3\cf14\b while\b0\cb3\cf25 ( \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 top\cb3\cf25 () != \cb3\cf22 '('\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  79                          \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  80                              \cb1\cf0 ep\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ]= \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 pop\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  81                              \cb1\cf0 j\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0  82                          \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  83                              \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 pa\cb3\cf25 .\cb1\cf0 top\cb3\cf25 () == \cb3\cf22 '('\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  84                                 \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  85                                     \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 pop\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  86                                 \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  87                              \cb1\cf0 i\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0  88                      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  89                  \cb3\cf14\b else
\par \cb1\cf0\ul0\i0\b0  90                      \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 '^'\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  91                      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  92                          \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 push\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]);
\par \cb1\cf0\ul0\i0\b0  93                          \cb1\cf0 i\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0  94                      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  95                      \cb3\cf14\b else 
\par \cb1\cf0\ul0\i0\b0  96                          \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 '+' \cb3\cf25 || \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 '-' \cb3\cf25 || \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 '*' \cb3\cf25 || \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 '/'\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  97                          \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  98                              \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 '+' \cb3\cf25 || \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ] == \cb3\cf22 '-'\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  99                              \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 100                                  \cb3\cf14\b while\b0\cb3\cf25 (!\cb1\cf0 pa\cb3\cf25 .\cb1\cf0 vacia\cb3\cf25 () && \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 top\cb3\cf25 () != \cb3\cf22 '('\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0 101                                      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 102                                          \cb1\cf0 ep\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ]=\cb1\cf0 pa\cb3\cf25 .\cb1\cf0 pop\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 103                                          \cb1\cf0 j\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0 104                                      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 105                                  \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 push\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]);
\par \cb1\cf0\ul0\i0\b0 106                                  \cb1\cf0 i\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0 107                              \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 108                              \cb3\cf14\b else
\par \cb1\cf0\ul0\i0\b0 109                              \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 110                                  \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 '*' \cb3\cf25 || \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]==\cb3\cf22 '/'\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0 111                                  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 112                                      \cb3\cf14\b while\b0\cb3\cf25 (!\cb1\cf0 pa\cb3\cf25 .\cb1\cf0 vacia\cb3\cf25 () && \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 top\cb3\cf25 () != \cb3\cf22 '(' \cb3\cf25 && (\cb1\cf0 pa\cb3\cf25 .\cb1\cf0 top\cb3\cf25 ()==\cb3\cf22 '*'\cb3\cf25 || \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 top\cb3\cf25 ()==\cb3\cf22 '/'\cb3\cf25 ))
\par \cb1\cf0\ul0\i0\b0 113                                      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 114                                          \cb1\cf0 ep\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ]=\cb1\cf0 pa\cb3\cf25 .\cb1\cf0 pop\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 115                                          \cb1\cf0 j\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0 116                                      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 117  
\par \cb1\cf0\ul0\i0\b0 118                                      \cb1\cf0 pa\cb3\cf25 .\cb1\cf0 push\cb3\cf25 (\cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]);
\par \cb1\cf0\ul0\i0\b0 119                                      \cb1\cf0 i\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0 120                                  \cb3\cf25 \}   
\par \cb1\cf0\ul0\i0\b0 121                             \cb3\cf25 \}      
\par \cb1\cf0\ul0\i0\b0 122  
\par \cb1\cf0\ul0\i0\b0 123                         \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 124                         \cb3\cf14\b else
\par \cb1\cf0\ul0\i0\b0 125                         \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 126                             \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "CARACTER INVALIDO"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ; 
\par \cb1\cf0\ul0\i0\b0 127                             \cb1\cf0 ei\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ] = \cb3\cf22 '\\0'\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 128                         \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 129  
\par \cb1\cf0\ul0\i0\b0 130              \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 131  
\par \cb1\cf0\ul0\i0\b0 132              \cb3\cf14\b while\b0\cb3\cf25 (!\cb1\cf0 pa\cb3\cf25 .\cb1\cf0 vacia\cb3\cf25 ())
\par \cb1\cf0\ul0\i0\b0 133              \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 134                  \cb1\cf0 ep\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ]=\cb1\cf0 pa\cb3\cf25 .\cb1\cf0 pop\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 135                  \cb1\cf0 j\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0 136              \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 137         \cb1\cf0 ep\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ] = \cb3\cf22 '\\0'\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 138  
\par \cb1\cf0\ul0\i0\b0 139         \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 140  
\par \cb1\cf0\ul0\i0\b0 141  \cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0 142  
\par \cb1\cf0\ul0\i0\b0 143  \cb3\cf14\b int \b0\cb1\cf0 main \cb3\cf25 () \{
\par \cb1\cf0\ul0\i0\b0 144  
\par \cb1\cf0\ul0\i0\b0 145      \cb3\cf14\b char \b0\cb1\cf0 expresion_infi\cb3\cf25 [\cb3\cf12 255\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0 146      \cb3\cf14\b char \b0\cb1\cf0 expresion_postfi\cb3\cf25 [\cb3\cf12 255\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0 147      \cb1\cf0 convierte_expresion ce\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 148      \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Ingrese la expresion a convertir: " \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 149      \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 getline \cb3\cf25 (\cb1\cf0 expresion_infi\cb3\cf25 , \cb3\cf12 254\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 150      \cb1\cf0 ce\cb3\cf25 .\cb1\cf0 postfi\cb3\cf25 (\cb1\cf0 expresion_infi\cb3\cf25 , \cb1\cf0 expresion_postfi\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 151      \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nExpresion posfija: \\n"  \cb3\cf25 << \cb1\cf0 expresion_postfi \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 152      \cb3\cf14\b return \b0\cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 153  \cb3\cf25 \}
\par }